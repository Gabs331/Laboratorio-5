
Laboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000810  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2a  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000522  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059b  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
		_delay_ms(10);
	}
}

void ADC_init(void){
	ADMUX |= (1 << REFS0);      // Referencia de voltaje: AVCC
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);     // Justificación a la derecha (10 bits)
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128  125kHz
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);      // Habilitar ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <adcRead>:
}

uint16_t adcRead(uint8_t canal){
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0F); // Selección del canal ADC
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                  // Iniciar conversión
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));           // Esperar que finalice la conversión
  d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d4:	86 fd       	sbrc	r24, 6
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <adcRead+0x18>
	return ADC;                             // Retornar resultado
  d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  e0:	08 95       	ret

000000e2 <main>:
void ADC_init(void);
uint16_t adcRead(uint8_t canal);

int main(void)
{
	DDRD = 0xFF;         // Configurar el puerto D como salida 
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	ADC_init();          // Inicializar ADC
  e6:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM_init();
  ea:	0e 94 aa 00 	call	0x154	; 0x154 <PWM_init>
	PWM2_init();          // Inicializar módulo PWM
  ee:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM2_init>

	while (1) 
	{
		Valor1 = adcRead(0);    // Leer valor del canal ADC0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
  f8:	bc 01       	movw	r22, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
 102:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Valor1>
 106:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Valor1+0x1>
 10a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Valor1+0x2>
 10e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Valor1+0x3>
		servo_writeA(Valor1);   // Enviar valor leído al servo (PWM)
 112:	0e 94 25 01 	call	0x24a	; 0x24a <servo_writeA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x3e>
 120:	00 00       	nop
		_delay_ms(10);          // Pequeña pausa para estabilidad
		Valor2 = adcRead(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 128:	bc 01       	movw	r22, r24
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
 132:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 13e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		servo_writeB(Valor2); 
 142:	0e 94 cf 01 	call	0x39e	; 0x39e <servo_writeB>
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9c e9       	ldi	r25, 0x9C	; 156
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x68>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x6e>
 150:	00 00       	nop
 152:	cf cf       	rjmp	.-98     	; 0xf2 <main+0x10>

00000154 <PWM_init>:
#include "PWM1.h"

void PWM_init(void){
	// Configura el pin PB1 como salida para generar la señal PWM
	DDRB |= (1 << PB1);
 154:	84 b1       	in	r24, 0x04	; 4
 156:	82 60       	ori	r24, 0x02	; 2
 158:	84 b9       	out	0x04, r24	; 4

	// Reinicia el contador del Timer1
	TCNT1 = 0;
 15a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 15e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// Establece el valor máximo del contador (TOP) en 39999 para obtener un periodo de 20 ms
	ICR1 = 39999;
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 16a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	// Configura el modo de comparación para el canal A (OC1A) sin inversión
	TCCR1A = (1 << COM1A1) | (0 << COM1A0);
 16e:	e0 e8       	ldi	r30, 0x80	; 128
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	80 83       	st	Z, r24

	// Selecciona el modo Fast PWM con TOP en ICR1 (modo 14)
	TCCR1A |= (1 << WGM11);
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12);
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	88 e1       	ldi	r24, 0x18	; 24
 182:	80 83       	st	Z, r24

	// Configura el prescaler en 8 frecuencia de 2 MHz para el Timer1
	TCCR1B |= (1 << CS11);
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <map>:
void servo_writeA(float adc_Value){
	// Convierte el valor del ADC a un valor de pulso entre 1000 y 4800 (1 ms a 2.4 ms)
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
}

float map(float x, float in_min, float in_max, float out_min, float out_max){
 18c:	4f 92       	push	r4
 18e:	5f 92       	push	r5
 190:	6f 92       	push	r6
 192:	7f 92       	push	r7
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	28 97       	sbiw	r28, 0x08	; 8
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	29 01       	movw	r4, r18
 1ba:	3a 01       	movw	r6, r20
 1bc:	ed 82       	std	Y+5, r14	; 0x05
 1be:	fe 82       	std	Y+6, r15	; 0x06
 1c0:	0f 83       	std	Y+7, r16	; 0x07
 1c2:	18 87       	std	Y+8, r17	; 0x08
	// Función para escalar un valor de un rango de entrada a uno de salida
	return ((x - in_min) * (out_max - out_min) / (in_max - in_min)) + out_min;
 1c4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 1c8:	69 83       	std	Y+1, r22	; 0x01
 1ca:	7a 83       	std	Y+2, r23	; 0x02
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	9c 83       	std	Y+4, r25	; 0x04
 1d0:	a6 01       	movw	r20, r12
 1d2:	95 01       	movw	r18, r10
 1d4:	69 8d       	ldd	r22, Y+25	; 0x19
 1d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1da:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 1e0:	9b 01       	movw	r18, r22
 1e2:	ac 01       	movw	r20, r24
 1e4:	69 81       	ldd	r22, Y+1	; 0x01
 1e6:	7a 81       	ldd	r23, Y+2	; 0x02
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 1f0:	69 83       	std	Y+1, r22	; 0x01
 1f2:	7a 83       	std	Y+2, r23	; 0x02
 1f4:	8b 83       	std	Y+3, r24	; 0x03
 1f6:	9c 83       	std	Y+4, r25	; 0x04
 1f8:	a3 01       	movw	r20, r6
 1fa:	92 01       	movw	r18, r4
 1fc:	c8 01       	movw	r24, r16
 1fe:	b7 01       	movw	r22, r14
 200:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 204:	9b 01       	movw	r18, r22
 206:	ac 01       	movw	r20, r24
 208:	69 81       	ldd	r22, Y+1	; 0x01
 20a:	7a 81       	ldd	r23, Y+2	; 0x02
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__divsf3>
 214:	9b 01       	movw	r18, r22
 216:	ac 01       	movw	r20, r24
 218:	c6 01       	movw	r24, r12
 21a:	b5 01       	movw	r22, r10
 21c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
}
 220:	28 96       	adiw	r28, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	7f 90       	pop	r7
 242:	6f 90       	pop	r6
 244:	5f 90       	pop	r5
 246:	4f 90       	pop	r4
 248:	08 95       	ret

0000024a <servo_writeA>:

	// Configura el prescaler en 8 frecuencia de 2 MHz para el Timer1
	TCCR1B |= (1 << CS11);
}

void servo_writeA(float adc_Value){
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
	// Convierte el valor del ADC a un valor de pulso entre 1000 y 4800 (1 ms a 2.4 ms)
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
 25a:	25 e4       	ldi	r18, 0x45	; 69
 25c:	2f 93       	push	r18
 25e:	26 e9       	ldi	r18, 0x96	; 150
 260:	2f 93       	push	r18
 262:	1f 92       	push	r1
 264:	1f 92       	push	r1
 266:	0f 2e       	mov	r0, r31
 268:	a1 2c       	mov	r10, r1
 26a:	b1 2c       	mov	r11, r1
 26c:	fa e7       	ldi	r31, 0x7A	; 122
 26e:	cf 2e       	mov	r12, r31
 270:	f4 e4       	ldi	r31, 0x44	; 68
 272:	df 2e       	mov	r13, r31
 274:	f0 2d       	mov	r31, r0
 276:	e1 2c       	mov	r14, r1
 278:	f1 2c       	mov	r15, r1
 27a:	00 e8       	ldi	r16, 0x80	; 128
 27c:	14 e4       	ldi	r17, 0x44	; 68
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a9 01       	movw	r20, r18
 284:	0e 94 c6 00 	call	0x18c	; 0x18c <map>
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 294:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 298:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	08 95       	ret

000002ae <PWM2_init>:
#include "PWM2.h"

void PWM2_init(void){
		DDRB |= (1 << PORTB2);
 2ae:	84 b1       	in	r24, 0x04	; 4
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	84 b9       	out	0x04, r24	; 4
		
		// Reinicia el contador del Timer1
		TCNT0 = 0;
 2b4:	16 bc       	out	0x26, r1	; 38

		
		TCCR0A = (1 << COM1B1) | (0 << COM1B0);
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	84 bd       	out	0x24, r24	; 36
		
		TCCR0B &= ~(1<<CS02); // colocamos en un preescalar de 64
 2ba:	85 b5       	in	r24, 0x25	; 37
 2bc:	8b 7f       	andi	r24, 0xFB	; 251
 2be:	85 bd       	out	0x25, r24	; 37
		TCCR0B |= (1<<CS01);
 2c0:	85 b5       	in	r24, 0x25	; 37
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	85 bd       	out	0x25, r24	; 37
		TCCR0B |= (1<<CS00);
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	85 bd       	out	0x25, r24	; 37
	
		TCCR0B &= (1<<WGM02); 
 2cc:	85 b5       	in	r24, 0x25	; 37
 2ce:	88 70       	andi	r24, 0x08	; 8
 2d0:	85 bd       	out	0x25, r24	; 37
		TCCR0A |= (1<<WGM01);
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= (1<<WGM00);
 2d8:	84 b5       	in	r24, 0x24	; 36
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	84 bd       	out	0x24, r24	; 36
 2de:	08 95       	ret

000002e0 <map2>:
void servo_writeB(float adc_Value){
	// Convierte el valor del ADC a un valor de pulso entre 1000 y 4800 (1 ms a 2.4 ms)
	OCR0B = map2(adc_Value, 0, 255, 8, 39);
}

float map2(float x, float in_min, float in_max, float out_min, float out_max){
 2e0:	4f 92       	push	r4
 2e2:	5f 92       	push	r5
 2e4:	6f 92       	push	r6
 2e6:	7f 92       	push	r7
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	28 97       	sbiw	r28, 0x08	; 8
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	29 01       	movw	r4, r18
 30e:	3a 01       	movw	r6, r20
 310:	ed 82       	std	Y+5, r14	; 0x05
 312:	fe 82       	std	Y+6, r15	; 0x06
 314:	0f 83       	std	Y+7, r16	; 0x07
 316:	18 87       	std	Y+8, r17	; 0x08
	// Función para escalar un valor de un rango de entrada a uno de salida
	return ((x - in_min) * (out_max - out_min) / (in_max - in_min)) + out_min;
 318:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 31c:	69 83       	std	Y+1, r22	; 0x01
 31e:	7a 83       	std	Y+2, r23	; 0x02
 320:	8b 83       	std	Y+3, r24	; 0x03
 322:	9c 83       	std	Y+4, r25	; 0x04
 324:	a6 01       	movw	r20, r12
 326:	95 01       	movw	r18, r10
 328:	69 8d       	ldd	r22, Y+25	; 0x19
 32a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 32c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 32e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 330:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	69 81       	ldd	r22, Y+1	; 0x01
 33a:	7a 81       	ldd	r23, Y+2	; 0x02
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	9c 81       	ldd	r25, Y+4	; 0x04
 340:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 344:	69 83       	std	Y+1, r22	; 0x01
 346:	7a 83       	std	Y+2, r23	; 0x02
 348:	8b 83       	std	Y+3, r24	; 0x03
 34a:	9c 83       	std	Y+4, r25	; 0x04
 34c:	a3 01       	movw	r20, r6
 34e:	92 01       	movw	r18, r4
 350:	c8 01       	movw	r24, r16
 352:	b7 01       	movw	r22, r14
 354:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 358:	9b 01       	movw	r18, r22
 35a:	ac 01       	movw	r20, r24
 35c:	69 81       	ldd	r22, Y+1	; 0x01
 35e:	7a 81       	ldd	r23, Y+2	; 0x02
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	9c 81       	ldd	r25, Y+4	; 0x04
 364:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__divsf3>
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	c6 01       	movw	r24, r12
 36e:	b5 01       	movw	r22, r10
 370:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 374:	28 96       	adiw	r28, 0x08	; 8
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	bf 90       	pop	r11
 392:	af 90       	pop	r10
 394:	7f 90       	pop	r7
 396:	6f 90       	pop	r6
 398:	5f 90       	pop	r5
 39a:	4f 90       	pop	r4
 39c:	08 95       	ret

0000039e <servo_writeB>:
		TCCR0A |= (1<<WGM01);
		TCCR0A |= (1<<WGM00);
		
}

void servo_writeB(float adc_Value){
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
	// Convierte el valor del ADC a un valor de pulso entre 1000 y 4800 (1 ms a 2.4 ms)
	OCR0B = map2(adc_Value, 0, 255, 8, 39);
 3ae:	22 e4       	ldi	r18, 0x42	; 66
 3b0:	2f 93       	push	r18
 3b2:	2c e1       	ldi	r18, 0x1C	; 28
 3b4:	2f 93       	push	r18
 3b6:	1f 92       	push	r1
 3b8:	1f 92       	push	r1
 3ba:	0f 2e       	mov	r0, r31
 3bc:	a1 2c       	mov	r10, r1
 3be:	b1 2c       	mov	r11, r1
 3c0:	c1 2c       	mov	r12, r1
 3c2:	f1 e4       	ldi	r31, 0x41	; 65
 3c4:	df 2e       	mov	r13, r31
 3c6:	f0 2d       	mov	r31, r0
 3c8:	e1 2c       	mov	r14, r1
 3ca:	f1 2c       	mov	r15, r1
 3cc:	0f e7       	ldi	r16, 0x7F	; 127
 3ce:	13 e4       	ldi	r17, 0x43	; 67
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	a9 01       	movw	r20, r18
 3d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <map2>
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 3e6:	68 bd       	out	0x28, r22	; 40
}
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	df 90       	pop	r13
 3f2:	cf 90       	pop	r12
 3f4:	bf 90       	pop	r11
 3f6:	af 90       	pop	r10
 3f8:	08 95       	ret

000003fa <__subsf3>:
 3fa:	50 58       	subi	r21, 0x80	; 128

000003fc <__addsf3>:
 3fc:	bb 27       	eor	r27, r27
 3fe:	aa 27       	eor	r26, r26
 400:	0e 94 15 02 	call	0x42a	; 0x42a <__addsf3x>
 404:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 408:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 40c:	38 f0       	brcs	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 412:	20 f0       	brcs	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	39 f4       	brne	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	9f 3f       	cpi	r25, 0xFF	; 255
 418:	19 f4       	brne	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	26 f4       	brtc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 420:	0e f4       	brtc	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	e0 95       	com	r30
 424:	e7 fb       	bst	r30, 7
 426:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>

0000042a <__addsf3x>:
 42a:	e9 2f       	mov	r30, r25
 42c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 430:	58 f3       	brcs	.-42     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 432:	ba 17       	cp	r27, r26
 434:	62 07       	cpc	r22, r18
 436:	73 07       	cpc	r23, r19
 438:	84 07       	cpc	r24, r20
 43a:	95 07       	cpc	r25, r21
 43c:	20 f0       	brcs	.+8      	; 0x446 <__addsf3x+0x1c>
 43e:	79 f4       	brne	.+30     	; 0x45e <__addsf3x+0x34>
 440:	a6 f5       	brtc	.+104    	; 0x4aa <__addsf3x+0x80>
 442:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 446:	0e f4       	brtc	.+2      	; 0x44a <__addsf3x+0x20>
 448:	e0 95       	com	r30
 44a:	0b 2e       	mov	r0, r27
 44c:	ba 2f       	mov	r27, r26
 44e:	a0 2d       	mov	r26, r0
 450:	0b 01       	movw	r0, r22
 452:	b9 01       	movw	r22, r18
 454:	90 01       	movw	r18, r0
 456:	0c 01       	movw	r0, r24
 458:	ca 01       	movw	r24, r20
 45a:	a0 01       	movw	r20, r0
 45c:	11 24       	eor	r1, r1
 45e:	ff 27       	eor	r31, r31
 460:	59 1b       	sub	r21, r25
 462:	99 f0       	breq	.+38     	; 0x48a <__addsf3x+0x60>
 464:	59 3f       	cpi	r21, 0xF9	; 249
 466:	50 f4       	brcc	.+20     	; 0x47c <__addsf3x+0x52>
 468:	50 3e       	cpi	r21, 0xE0	; 224
 46a:	68 f1       	brcs	.+90     	; 0x4c6 <__addsf3x+0x9c>
 46c:	1a 16       	cp	r1, r26
 46e:	f0 40       	sbci	r31, 0x00	; 0
 470:	a2 2f       	mov	r26, r18
 472:	23 2f       	mov	r18, r19
 474:	34 2f       	mov	r19, r20
 476:	44 27       	eor	r20, r20
 478:	58 5f       	subi	r21, 0xF8	; 248
 47a:	f3 cf       	rjmp	.-26     	; 0x462 <__addsf3x+0x38>
 47c:	46 95       	lsr	r20
 47e:	37 95       	ror	r19
 480:	27 95       	ror	r18
 482:	a7 95       	ror	r26
 484:	f0 40       	sbci	r31, 0x00	; 0
 486:	53 95       	inc	r21
 488:	c9 f7       	brne	.-14     	; 0x47c <__addsf3x+0x52>
 48a:	7e f4       	brtc	.+30     	; 0x4aa <__addsf3x+0x80>
 48c:	1f 16       	cp	r1, r31
 48e:	ba 0b       	sbc	r27, r26
 490:	62 0b       	sbc	r22, r18
 492:	73 0b       	sbc	r23, r19
 494:	84 0b       	sbc	r24, r20
 496:	ba f0       	brmi	.+46     	; 0x4c6 <__addsf3x+0x9c>
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	a1 f0       	breq	.+40     	; 0x4c4 <__addsf3x+0x9a>
 49c:	ff 0f       	add	r31, r31
 49e:	bb 1f       	adc	r27, r27
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	c2 f7       	brpl	.-16     	; 0x498 <__addsf3x+0x6e>
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__addsf3x+0x9c>
 4aa:	ba 0f       	add	r27, r26
 4ac:	62 1f       	adc	r22, r18
 4ae:	73 1f       	adc	r23, r19
 4b0:	84 1f       	adc	r24, r20
 4b2:	48 f4       	brcc	.+18     	; 0x4c6 <__addsf3x+0x9c>
 4b4:	87 95       	ror	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f7 95       	ror	r31
 4be:	9e 3f       	cpi	r25, 0xFE	; 254
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <__addsf3x+0x9a>
 4c2:	b0 cf       	rjmp	.-160    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 4c4:	93 95       	inc	r25
 4c6:	88 0f       	add	r24, r24
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <__addsf3x+0xa2>
 4ca:	99 27       	eor	r25, r25
 4cc:	ee 0f       	add	r30, r30
 4ce:	97 95       	ror	r25
 4d0:	87 95       	ror	r24
 4d2:	08 95       	ret

000004d4 <__divsf3>:
 4d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divsf3x>
 4d8:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 4dc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 4e0:	58 f0       	brcs	.+22     	; 0x4f8 <__divsf3+0x24>
 4e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 4e6:	40 f0       	brcs	.+16     	; 0x4f8 <__divsf3+0x24>
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <__divsf3+0x20>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	29 f0       	breq	.+10     	; 0x4f8 <__divsf3+0x24>
 4ee:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 4f2:	51 11       	cpse	r21, r1
 4f4:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 4f8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>

000004fc <__divsf3x>:
 4fc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 500:	68 f3       	brcs	.-38     	; 0x4dc <__divsf3+0x8>

00000502 <__divsf3_pse>:
 502:	99 23       	and	r25, r25
 504:	b1 f3       	breq	.-20     	; 0x4f2 <__divsf3+0x1e>
 506:	55 23       	and	r21, r21
 508:	91 f3       	breq	.-28     	; 0x4ee <__divsf3+0x1a>
 50a:	95 1b       	sub	r25, r21
 50c:	55 0b       	sbc	r21, r21
 50e:	bb 27       	eor	r27, r27
 510:	aa 27       	eor	r26, r26
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	38 f0       	brcs	.+14     	; 0x528 <__divsf3_pse+0x26>
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	44 1f       	adc	r20, r20
 524:	aa 1f       	adc	r26, r26
 526:	a9 f3       	breq	.-22     	; 0x512 <__divsf3_pse+0x10>
 528:	35 d0       	rcall	.+106    	; 0x594 <__divsf3_pse+0x92>
 52a:	0e 2e       	mov	r0, r30
 52c:	3a f0       	brmi	.+14     	; 0x53c <__divsf3_pse+0x3a>
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	32 d0       	rcall	.+100    	; 0x596 <__divsf3_pse+0x94>
 532:	91 50       	subi	r25, 0x01	; 1
 534:	50 40       	sbci	r21, 0x00	; 0
 536:	e6 95       	lsr	r30
 538:	00 1c       	adc	r0, r0
 53a:	ca f7       	brpl	.-14     	; 0x52e <__divsf3_pse+0x2c>
 53c:	2b d0       	rcall	.+86     	; 0x594 <__divsf3_pse+0x92>
 53e:	fe 2f       	mov	r31, r30
 540:	29 d0       	rcall	.+82     	; 0x594 <__divsf3_pse+0x92>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	bb 1f       	adc	r27, r27
 54a:	26 17       	cp	r18, r22
 54c:	37 07       	cpc	r19, r23
 54e:	48 07       	cpc	r20, r24
 550:	ab 07       	cpc	r26, r27
 552:	b0 e8       	ldi	r27, 0x80	; 128
 554:	09 f0       	breq	.+2      	; 0x558 <__divsf3_pse+0x56>
 556:	bb 0b       	sbc	r27, r27
 558:	80 2d       	mov	r24, r0
 55a:	bf 01       	movw	r22, r30
 55c:	ff 27       	eor	r31, r31
 55e:	93 58       	subi	r25, 0x83	; 131
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	3a f0       	brmi	.+14     	; 0x572 <__divsf3_pse+0x70>
 564:	9e 3f       	cpi	r25, 0xFE	; 254
 566:	51 05       	cpc	r21, r1
 568:	78 f0       	brcs	.+30     	; 0x588 <__divsf3_pse+0x86>
 56a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 56e:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	e4 f3       	brlt	.-8      	; 0x56e <__divsf3_pse+0x6c>
 576:	98 3e       	cpi	r25, 0xE8	; 232
 578:	d4 f3       	brlt	.-12     	; 0x56e <__divsf3_pse+0x6c>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	f7 95       	ror	r31
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	c9 f7       	brne	.-14     	; 0x57a <__divsf3_pse+0x78>
 588:	88 0f       	add	r24, r24
 58a:	91 1d       	adc	r25, r1
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret
 594:	e1 e0       	ldi	r30, 0x01	; 1
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	bb 1f       	adc	r27, r27
 59e:	62 17       	cp	r22, r18
 5a0:	73 07       	cpc	r23, r19
 5a2:	84 07       	cpc	r24, r20
 5a4:	ba 07       	cpc	r27, r26
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__divsf3_pse+0xae>
 5a8:	62 1b       	sub	r22, r18
 5aa:	73 0b       	sbc	r23, r19
 5ac:	84 0b       	sbc	r24, r20
 5ae:	ba 0b       	sbc	r27, r26
 5b0:	ee 1f       	adc	r30, r30
 5b2:	88 f7       	brcc	.-30     	; 0x596 <__divsf3_pse+0x94>
 5b4:	e0 95       	com	r30
 5b6:	08 95       	ret

000005b8 <__fixunssfsi>:
 5b8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 5bc:	88 f0       	brcs	.+34     	; 0x5e0 <__fixunssfsi+0x28>
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	98 f0       	brcs	.+38     	; 0x5e8 <__fixunssfsi+0x30>
 5c2:	b9 2f       	mov	r27, r25
 5c4:	99 27       	eor	r25, r25
 5c6:	b7 51       	subi	r27, 0x17	; 23
 5c8:	b0 f0       	brcs	.+44     	; 0x5f6 <__fixunssfsi+0x3e>
 5ca:	e1 f0       	breq	.+56     	; 0x604 <__fixunssfsi+0x4c>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a f0       	brmi	.+6      	; 0x5dc <__fixunssfsi+0x24>
 5d6:	ba 95       	dec	r27
 5d8:	c9 f7       	brne	.-14     	; 0x5cc <__fixunssfsi+0x14>
 5da:	14 c0       	rjmp	.+40     	; 0x604 <__fixunssfsi+0x4c>
 5dc:	b1 30       	cpi	r27, 0x01	; 1
 5de:	91 f0       	breq	.+36     	; 0x604 <__fixunssfsi+0x4c>
 5e0:	0e 94 92 03 	call	0x724	; 0x724 <__fp_zero>
 5e4:	b1 e0       	ldi	r27, 0x01	; 1
 5e6:	08 95       	ret
 5e8:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 5ec:	67 2f       	mov	r22, r23
 5ee:	78 2f       	mov	r23, r24
 5f0:	88 27       	eor	r24, r24
 5f2:	b8 5f       	subi	r27, 0xF8	; 248
 5f4:	39 f0       	breq	.+14     	; 0x604 <__fixunssfsi+0x4c>
 5f6:	b9 3f       	cpi	r27, 0xF9	; 249
 5f8:	cc f3       	brlt	.-14     	; 0x5ec <__fixunssfsi+0x34>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b3 95       	inc	r27
 602:	d9 f7       	brne	.-10     	; 0x5fa <__fixunssfsi+0x42>
 604:	3e f4       	brtc	.+14     	; 0x614 <__fixunssfsi+0x5c>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__floatunsisf>:
 616:	e8 94       	clt
 618:	09 c0       	rjmp	.+18     	; 0x62c <__floatsisf+0x12>

0000061a <__floatsisf>:
 61a:	97 fb       	bst	r25, 7
 61c:	3e f4       	brtc	.+14     	; 0x62c <__floatsisf+0x12>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	99 23       	and	r25, r25
 62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x40>
 630:	f9 2f       	mov	r31, r25
 632:	96 e9       	ldi	r25, 0x96	; 150
 634:	bb 27       	eor	r27, r27
 636:	93 95       	inc	r25
 638:	f6 95       	lsr	r31
 63a:	87 95       	ror	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f1 11       	cpse	r31, r1
 644:	f8 cf       	rjmp	.-16     	; 0x636 <__floatsisf+0x1c>
 646:	fa f4       	brpl	.+62     	; 0x686 <__floatsisf+0x6c>
 648:	bb 0f       	add	r27, r27
 64a:	11 f4       	brne	.+4      	; 0x650 <__floatsisf+0x36>
 64c:	60 ff       	sbrs	r22, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__floatsisf+0x6c>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	16 c0       	rjmp	.+44     	; 0x686 <__floatsisf+0x6c>
 65a:	88 23       	and	r24, r24
 65c:	11 f0       	breq	.+4      	; 0x662 <__floatsisf+0x48>
 65e:	96 e9       	ldi	r25, 0x96	; 150
 660:	11 c0       	rjmp	.+34     	; 0x684 <__floatsisf+0x6a>
 662:	77 23       	and	r23, r23
 664:	21 f0       	breq	.+8      	; 0x66e <__floatsisf+0x54>
 666:	9e e8       	ldi	r25, 0x8E	; 142
 668:	87 2f       	mov	r24, r23
 66a:	76 2f       	mov	r23, r22
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__floatsisf+0x5e>
 66e:	66 23       	and	r22, r22
 670:	71 f0       	breq	.+28     	; 0x68e <__floatsisf+0x74>
 672:	96 e8       	ldi	r25, 0x86	; 134
 674:	86 2f       	mov	r24, r22
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	2a f0       	brmi	.+10     	; 0x686 <__floatsisf+0x6c>
 67c:	9a 95       	dec	r25
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	da f7       	brpl	.-10     	; 0x67c <__floatsisf+0x62>
 686:	88 0f       	add	r24, r24
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__fp_inf>:
 690:	97 f9       	bld	r25, 7
 692:	9f 67       	ori	r25, 0x7F	; 127
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	08 95       	ret

0000069c <__fp_nan>:
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	08 95       	ret

000006a2 <__fp_pscA>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	09 06       	cpc	r0, r25
 6ae:	08 95       	ret

000006b0 <__fp_pscB>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	14 06       	cpc	r1, r20
 6ba:	05 06       	cpc	r0, r21
 6bc:	08 95       	ret

000006be <__fp_round>:
 6be:	09 2e       	mov	r0, r25
 6c0:	03 94       	inc	r0
 6c2:	00 0c       	add	r0, r0
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__fp_round+0xc>
 6c6:	88 23       	and	r24, r24
 6c8:	52 f0       	brmi	.+20     	; 0x6de <__fp_round+0x20>
 6ca:	bb 0f       	add	r27, r27
 6cc:	40 f4       	brcc	.+16     	; 0x6de <__fp_round+0x20>
 6ce:	bf 2b       	or	r27, r31
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__fp_round+0x18>
 6d2:	60 ff       	sbrs	r22, 0
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__fp_round+0x20>
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__mulsf3>:
 732:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3x>
 736:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 73a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 73e:	38 f0       	brcs	.+14     	; 0x74e <__mulsf3+0x1c>
 740:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 744:	20 f0       	brcs	.+8      	; 0x74e <__mulsf3+0x1c>
 746:	95 23       	and	r25, r21
 748:	11 f0       	breq	.+4      	; 0x74e <__mulsf3+0x1c>
 74a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 74e:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000758 <__mulsf3x>:
 758:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 75c:	70 f3       	brcs	.-36     	; 0x73a <__mulsf3+0x8>

0000075e <__mulsf3_pse>:
 75e:	95 9f       	mul	r25, r21
 760:	c1 f3       	breq	.-16     	; 0x752 <__mulsf3+0x20>
 762:	95 0f       	add	r25, r21
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	55 1f       	adc	r21, r21
 768:	62 9f       	mul	r22, r18
 76a:	f0 01       	movw	r30, r0
 76c:	72 9f       	mul	r23, r18
 76e:	bb 27       	eor	r27, r27
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	63 9f       	mul	r22, r19
 776:	aa 27       	eor	r26, r26
 778:	f0 0d       	add	r31, r0
 77a:	b1 1d       	adc	r27, r1
 77c:	aa 1f       	adc	r26, r26
 77e:	64 9f       	mul	r22, r20
 780:	66 27       	eor	r22, r22
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	66 1f       	adc	r22, r22
 788:	82 9f       	mul	r24, r18
 78a:	22 27       	eor	r18, r18
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	73 9f       	mul	r23, r19
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	62 1f       	adc	r22, r18
 79a:	83 9f       	mul	r24, r19
 79c:	a0 0d       	add	r26, r0
 79e:	61 1d       	adc	r22, r1
 7a0:	22 1f       	adc	r18, r18
 7a2:	74 9f       	mul	r23, r20
 7a4:	33 27       	eor	r19, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	23 1f       	adc	r18, r19
 7ac:	84 9f       	mul	r24, r20
 7ae:	60 0d       	add	r22, r0
 7b0:	21 1d       	adc	r18, r1
 7b2:	82 2f       	mov	r24, r18
 7b4:	76 2f       	mov	r23, r22
 7b6:	6a 2f       	mov	r22, r26
 7b8:	11 24       	eor	r1, r1
 7ba:	9f 57       	subi	r25, 0x7F	; 127
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	9a f0       	brmi	.+38     	; 0x7e6 <__mulsf3_pse+0x88>
 7c0:	f1 f0       	breq	.+60     	; 0x7fe <__mulsf3_pse+0xa0>
 7c2:	88 23       	and	r24, r24
 7c4:	4a f0       	brmi	.+18     	; 0x7d8 <__mulsf3_pse+0x7a>
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	bb 1f       	adc	r27, r27
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__mulsf3_pse+0x64>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	80 f0       	brcs	.+32     	; 0x7fe <__mulsf3_pse+0xa0>
 7de:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 7e2:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__mulsf3_pse+0x84>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__mulsf3_pse+0x84>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x90>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
