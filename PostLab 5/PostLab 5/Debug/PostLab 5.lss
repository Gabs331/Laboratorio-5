
PostLab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000068a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca2  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091b  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093e  00000000  00000000  00001d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000227  00000000  00000000  00002c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  88:	0c 94 09 03 	jmp	0x612	; 0x612 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ConfiADCPin>:
#include <avr/io.h>
#include <stdint.h>

void ConfiADCPin(uint8_t VoltRef, uint8_t Just, uint8_t Pin){
	
		if(VoltRef == 0){
  90:	81 11       	cpse	r24, r1
  92:	06 c0       	rjmp	.+12     	; 0xa0 <ConfiADCPin+0x10>
			ADMUX &= ~((1 << REFS0) | (1 << REFS1));
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 73       	andi	r24, 0x3F	; 63
  9c:	80 83       	st	Z, r24
  9e:	10 c0       	rjmp	.+32     	; 0xc0 <ConfiADCPin+0x30>
		}
		else if(VoltRef == 1){
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	49 f4       	brne	.+18     	; 0xb6 <ConfiADCPin+0x26>
			ADMUX |= (1 << REFS0);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
			ADMUX &= ~(1 << REFS1);
  ae:	80 81       	ld	r24, Z
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	80 83       	st	Z, r24
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <ConfiADCPin+0x30>
		}
		else{
			ADMUX |= (1 << REFS0) | (1 << REFS1);
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 6c       	ori	r24, 0xC0	; 192
  be:	80 83       	st	Z, r24
		}
		
		
		
		
		if(Just == 1){
  c0:	61 30       	cpi	r22, 0x01	; 1
  c2:	31 f4       	brne	.+12     	; 0xd0 <ConfiADCPin+0x40>
			ADMUX |= (1 << ADLAR);
  c4:	ec e7       	ldi	r30, 0x7C	; 124
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	80 83       	st	Z, r24
  ce:	05 c0       	rjmp	.+10     	; 0xda <ConfiADCPin+0x4a>
		}
		else{
			ADMUX &= ~(1 << ADLAR);
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	80 83       	st	Z, r24
		}
		
		
		
		ADMUX = (ADMUX & 0xF0) | Pin;
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	48 2b       	or	r20, r24
  e4:	40 83       	st	Z, r20
  e6:	08 95       	ret

000000e8 <ConfiADC>:
}


void ConfiADC(uint8_t Abil, uint8_t AutoTrig, uint8_t Inter, uint8_t Prescaler){
	
	if(Abil == 1){
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	31 f4       	brne	.+12     	; 0xf8 <ConfiADC+0x10>
		ADCSRA |= (1 << ADEN);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
  f6:	05 c0       	rjmp	.+10     	; 0x102 <ConfiADC+0x1a>
	}
	else{
		ADCSRA &= ~(1 << ADEN);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	80 83       	st	Z, r24
	}
	
	
	
	if(AutoTrig == 1){
 102:	61 30       	cpi	r22, 0x01	; 1
 104:	31 f4       	brne	.+12     	; 0x112 <ConfiADC+0x2a>
		ADCSRA |= (1 << ADATE);
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	80 83       	st	Z, r24
 110:	05 c0       	rjmp	.+10     	; 0x11c <ConfiADC+0x34>
	}
	else{
		ADCSRA &= ~(1 << ADATE);
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	80 83       	st	Z, r24
	}
	
	if(Inter == 1){
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	31 f4       	brne	.+12     	; 0x12c <ConfiADC+0x44>
		ADCSRA |= (1 << ADIE);
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
 12a:	05 c0       	rjmp	.+10     	; 0x136 <ConfiADC+0x4e>
	}
	else {
		ADCSRA &= ~(1 << ADIE);
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	80 83       	st	Z, r24
	}
	
	switch (Prescaler){
 136:	20 31       	cpi	r18, 0x10	; 16
 138:	41 f1       	breq	.+80     	; 0x18a <ConfiADC+0xa2>
 13a:	40 f4       	brcc	.+16     	; 0x14c <ConfiADC+0x64>
 13c:	24 30       	cpi	r18, 0x04	; 4
 13e:	99 f0       	breq	.+38     	; 0x166 <ConfiADC+0x7e>
 140:	28 30       	cpi	r18, 0x08	; 8
 142:	d1 f0       	breq	.+52     	; 0x178 <ConfiADC+0x90>
 144:	22 30       	cpi	r18, 0x02	; 2
 146:	09 f0       	breq	.+2      	; 0x14a <ConfiADC+0x62>
 148:	41 c0       	rjmp	.+130    	; 0x1cc <ConfiADC+0xe4>
 14a:	07 c0       	rjmp	.+14     	; 0x15a <ConfiADC+0x72>
 14c:	20 34       	cpi	r18, 0x40	; 64
 14e:	79 f1       	breq	.+94     	; 0x1ae <ConfiADC+0xc6>
 150:	20 38       	cpi	r18, 0x80	; 128
 152:	b1 f1       	breq	.+108    	; 0x1c0 <ConfiADC+0xd8>
 154:	20 32       	cpi	r18, 0x20	; 32
 156:	d1 f5       	brne	.+116    	; 0x1cc <ConfiADC+0xe4>
 158:	21 c0       	rjmp	.+66     	; 0x19c <ConfiADC+0xb4>
		case 2:
		ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	80 83       	st	Z, r24
		break;
 164:	08 95       	ret
		case 4:
		ADCSRA |= (1 << ADPS1);
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
		ADCSRA &= ~((1 << ADPS0) | (1 << ADPS2));
 170:	80 81       	ld	r24, Z
 172:	8a 7f       	andi	r24, 0xFA	; 250
 174:	80 83       	st	Z, r24
		break;
 176:	08 95       	ret
		case 8:
		ADCSRA |= (1 << ADPS0 ) | (1 << ADPS1);
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	80 83       	st	Z, r24
		ADCSRA &= ~(1 << ADPS2);
 182:	80 81       	ld	r24, Z
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	80 83       	st	Z, r24
		break;
 188:	08 95       	ret
		case 16:
		ADCSRA |= (1 << ADPS2);
 18a:	ea e7       	ldi	r30, 0x7A	; 122
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
		ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1));
 194:	80 81       	ld	r24, Z
 196:	8c 7f       	andi	r24, 0xFC	; 252
 198:	80 83       	st	Z, r24
		break;
 19a:	08 95       	ret
		case 32:
		ADCSRA |= (1 << ADPS0 ) | (1 << ADPS2);
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	85 60       	ori	r24, 0x05	; 5
 1a4:	80 83       	st	Z, r24
		ADCSRA &= ~(1 << ADPS1);
 1a6:	80 81       	ld	r24, Z
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	80 83       	st	Z, r24
		break;
 1ac:	08 95       	ret
		case 64:
		ADCSRA |= (1 << ADPS1) | (1 << ADPS2);
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	86 60       	ori	r24, 0x06	; 6
 1b6:	80 83       	st	Z, r24
		ADCSRA &= ~(1 << ADPS0);
 1b8:	80 81       	ld	r24, Z
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	80 83       	st	Z, r24
		break;
 1be:	08 95       	ret
		case 128:
		ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 1c0:	ea e7       	ldi	r30, 0x7A	; 122
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	87 60       	ori	r24, 0x07	; 7
 1c8:	80 83       	st	Z, r24
		break;
 1ca:	08 95       	ret
		default:
		ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <main>:
uint8_t Pot2 = 0;
uint8_t Pot3 = 0;

int main(void)
{
	CLKPR |= (1 << CLKPCE);
 1d8:	e1 e6       	ldi	r30, 0x61	; 97
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24
	CLKPR |= (1 << CLKPS0); //8MHz
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC5D);
 1e8:	ee e7       	ldi	r30, 0x7E	; 126
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 83       	st	Z, r24
	
	setPWM0A(Nor, Fast_FF_0, 1024);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	54 e0       	ldi	r21, 0x04	; 4
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 87 01 	call	0x30e	; 0x30e <setPWM0A>
	
	setPWM1A(Nor, bits_8, 1024);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	54 e0       	ldi	r21, 0x04	; 4
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <setPWM1A>
	
	setPWM2A(Nor, Fast_FF_2, 1024);
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	54 e0       	ldi	r21, 0x04	; 4
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 80 02 	call	0x500	; 0x500 <setPWM2A>
	
	ConfiADCPin(Volt5, JustIz, 7);
 216:	47 e0       	ldi	r20, 0x07	; 7
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 48 00 	call	0x90	; 0x90 <ConfiADCPin>
	
	ConfiADC(ON, OFF, ON, 128);
 220:	20 e8       	ldi	r18, 0x80	; 128
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 74 00 	call	0xe8	; 0xe8 <ConfiADC>
	
	sei();
 22c:	78 94       	sei
	
	while (1){
		ADCSRA |= (1 << ADSC);
 22e:	ea e7       	ldi	r30, 0x7A	; 122
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
		
		DutyA1(Pot1/6);
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Pot1>
 23c:	cb ea       	ldi	r28, 0xAB	; 171
 23e:	8c 9f       	mul	r24, r28
 240:	81 2d       	mov	r24, r1
 242:	11 24       	eor	r1, r1
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DutyA1>
		DutyA2(Pot2/6);
 24c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Pot2>
 250:	8c 9f       	mul	r24, r28
 252:	81 2d       	mov	r24, r1
 254:	11 24       	eor	r1, r1
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	0e 94 06 03 	call	0x60c	; 0x60c <DutyA2>
		DutyA0(Pot3);
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	0e 94 df 01 	call	0x3be	; 0x3be <DutyA0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9c e9       	ldi	r25, 0x9C	; 156
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x92>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x98>
 270:	00 00       	nop
 272:	dd cf       	rjmp	.-70     	; 0x22e <main+0x56>

00000274 <__vector_21>:
		
		_delay_ms(10);
	}
}

ISR(ADC_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	Pot = (ADMUX & 0x0F);
 296:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Pot>
	
	if (Pot == 7){
 2a0:	87 30       	cpi	r24, 0x07	; 7
 2a2:	51 f4       	brne	.+20     	; 0x2b8 <__vector_21+0x44>
		Pot1 = ADCH;
 2a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Pot1>
		ConfiADCPin(Volt5, JustIz, 5);
 2ac:	45 e0       	ldi	r20, 0x05	; 5
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 48 00 	call	0x90	; 0x90 <ConfiADCPin>
 2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <__vector_21+0x6e>
	}
	else if (Pot == 6){
 2b8:	86 30       	cpi	r24, 0x06	; 6
 2ba:	51 f4       	brne	.+20     	; 0x2d0 <__vector_21+0x5c>
		Pot2 = ADCH;
 2bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Pot2>
		ConfiADCPin(Volt5, JustIz, 7);
 2c4:	47 e0       	ldi	r20, 0x07	; 7
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 48 00 	call	0x90	; 0x90 <ConfiADCPin>
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <__vector_21+0x6e>
	}
	else {
		Pot3 = ADCH;
 2d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ConfiADCPin(Volt5, JustIz, 6);
 2d8:	46 e0       	ldi	r20, 0x06	; 6
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 48 00 	call	0x90	; 0x90 <ConfiADCPin>
	}
	
	ADCSRA |= (1 << ADIF); //Apagar la bandera de ADC
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	80 83       	st	Z, r24
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <setPWM0A>:
#include "PWM0.h"
#include <avr/io.h>
#include <stdint.h>

void setPWM0A(uint8_t INV_NOR, uint8_t ModoOnda, uint16_t Prescaler){
		DDRD |= (1 << DDD6);
 30e:	9a b1       	in	r25, 0x0a	; 10
 310:	90 64       	ori	r25, 0x40	; 64
 312:	9a b9       	out	0x0a, r25	; 10
		TCCR0A = 0;
 314:	14 bc       	out	0x24, r1	; 36
		TCCR0B = 0;
 316:	15 bc       	out	0x25, r1	; 37
		
		
		if (INV_NOR == 1){
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	19 f4       	brne	.+6      	; 0x322 <setPWM0A+0x14>
			TCCR0A = (1 << COM0A1) | (1 << COM0A0);
 31c:	80 ec       	ldi	r24, 0xC0	; 192
 31e:	84 bd       	out	0x24, r24	; 36
 320:	02 c0       	rjmp	.+4      	; 0x326 <setPWM0A+0x18>
		}
		else {
			TCCR0A = (1 << COM0A1);
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	84 bd       	out	0x24, r24	; 36
		}
		

		
		if (ModoOnda == 0){
 326:	61 11       	cpse	r22, r1
 328:	07 c0       	rjmp	.+14     	; 0x338 <setPWM0A+0x2a>
			TCCR0A |= (1 << WGM00);
 32a:	84 b5       	in	r24, 0x24	; 36
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	84 bd       	out	0x24, r24	; 36
			TCCR0A &= ~(1 << WGM01);
 330:	84 b5       	in	r24, 0x24	; 36
 332:	8d 7f       	andi	r24, 0xFD	; 253
 334:	84 bd       	out	0x24, r24	; 36
 336:	18 c0       	rjmp	.+48     	; 0x368 <setPWM0A+0x5a>
		}
		else if (ModoOnda == 1){
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	21 f4       	brne	.+8      	; 0x344 <setPWM0A+0x36>
			TCCR0A |= (1 << WGM00) | (1 << WGM01);
 33c:	84 b5       	in	r24, 0x24	; 36
 33e:	83 60       	ori	r24, 0x03	; 3
 340:	84 bd       	out	0x24, r24	; 36
 342:	12 c0       	rjmp	.+36     	; 0x368 <setPWM0A+0x5a>
		}
		else if (ModoOnda == 2){
 344:	62 30       	cpi	r22, 0x02	; 2
 346:	51 f4       	brne	.+20     	; 0x35c <setPWM0A+0x4e>
			TCCR0A |= (1 << WGM00);
 348:	84 b5       	in	r24, 0x24	; 36
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	84 bd       	out	0x24, r24	; 36
			TCCR0A &= ~(1 << WGM01);
 34e:	84 b5       	in	r24, 0x24	; 36
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	84 bd       	out	0x24, r24	; 36
			TCCR0B |= (1 << WGM02);
 354:	85 b5       	in	r24, 0x25	; 37
 356:	88 60       	ori	r24, 0x08	; 8
 358:	85 bd       	out	0x25, r24	; 37
 35a:	06 c0       	rjmp	.+12     	; 0x368 <setPWM0A+0x5a>
		}
		else{
			TCCR0A |= (1 << WGM00) | (1 << WGM01);
 35c:	84 b5       	in	r24, 0x24	; 36
 35e:	83 60       	ori	r24, 0x03	; 3
 360:	84 bd       	out	0x24, r24	; 36
			TCCR0B |= (1 << WGM02);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	88 60       	ori	r24, 0x08	; 8
 366:	85 bd       	out	0x25, r24	; 37
		}
		
		
		switch (Prescaler){
 368:	40 34       	cpi	r20, 0x40	; 64
 36a:	51 05       	cpc	r21, r1
 36c:	c1 f0       	breq	.+48     	; 0x39e <setPWM0A+0x90>
 36e:	38 f4       	brcc	.+14     	; 0x37e <setPWM0A+0x70>
 370:	41 15       	cp	r20, r1
 372:	51 05       	cpc	r21, r1
 374:	61 f0       	breq	.+24     	; 0x38e <setPWM0A+0x80>
 376:	48 30       	cpi	r20, 0x08	; 8
 378:	51 05       	cpc	r21, r1
 37a:	69 f0       	breq	.+26     	; 0x396 <setPWM0A+0x88>
 37c:	1c c0       	rjmp	.+56     	; 0x3b6 <setPWM0A+0xa8>
 37e:	41 15       	cp	r20, r1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	58 07       	cpc	r21, r24
 384:	81 f0       	breq	.+32     	; 0x3a6 <setPWM0A+0x98>
 386:	41 15       	cp	r20, r1
 388:	54 40       	sbci	r21, 0x04	; 4
 38a:	89 f0       	breq	.+34     	; 0x3ae <setPWM0A+0xa0>
 38c:	14 c0       	rjmp	.+40     	; 0x3b6 <setPWM0A+0xa8>
			case 0:
			TCCR0B |= (1 << CS00);
 38e:	85 b5       	in	r24, 0x25	; 37
 390:	81 60       	ori	r24, 0x01	; 1
 392:	85 bd       	out	0x25, r24	; 37
			break;
 394:	08 95       	ret
			case 8:
			TCCR0B |= (1 << CS01);
 396:	85 b5       	in	r24, 0x25	; 37
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	85 bd       	out	0x25, r24	; 37
			break;
 39c:	08 95       	ret
			case 64:
			TCCR0B |= (1 << CS00) | (1 << CS01);
 39e:	85 b5       	in	r24, 0x25	; 37
 3a0:	83 60       	ori	r24, 0x03	; 3
 3a2:	85 bd       	out	0x25, r24	; 37
			break;
 3a4:	08 95       	ret
			case 256:
			TCCR0B |= (1 << CS02);
 3a6:	85 b5       	in	r24, 0x25	; 37
 3a8:	84 60       	ori	r24, 0x04	; 4
 3aa:	85 bd       	out	0x25, r24	; 37
			break;
 3ac:	08 95       	ret
			case 1024:
			TCCR0B |= (1 << CS00) | (1 << CS02);
 3ae:	85 b5       	in	r24, 0x25	; 37
 3b0:	85 60       	ori	r24, 0x05	; 5
 3b2:	85 bd       	out	0x25, r24	; 37
			break;
 3b4:	08 95       	ret
			
			default:
			TCCR0B |= (1 << CS00);
 3b6:	85 b5       	in	r24, 0x25	; 37
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	85 bd       	out	0x25, r24	; 37
 3bc:	08 95       	ret

000003be <DutyA0>:
		
}


void DutyA0(uint8_t DutyCycle){
	OCR0A = DutyCycle;
 3be:	87 bd       	out	0x27, r24	; 39
 3c0:	08 95       	ret

000003c2 <setPWM1A>:
#include "PWM1.h"
#include <avr/io.h>
#include <stdint.h>

void setPWM1A(uint8_t INV_NOR, uint8_t ModoOnda, uint16_t Prescaler){
	DDRB |= (1 << DDB1);
 3c2:	94 b1       	in	r25, 0x04	; 4
 3c4:	92 60       	ori	r25, 0x02	; 2
 3c6:	94 b9       	out	0x04, r25	; 4
	TCCR1A = 0;
 3c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 3cc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (INV_NOR == 1){
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <setPWM1A+0x1e>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 3d4:	e0 e8       	ldi	r30, 0x80	; 128
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 6c       	ori	r24, 0xC0	; 192
 3dc:	80 83       	st	Z, r24
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <setPWM1A+0x28>
	}
	else {
		TCCR1A |= (1 << COM1A1);
 3e0:	e0 e8       	ldi	r30, 0x80	; 128
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	80 83       	st	Z, r24
	}
	
	switch (ModoOnda){
 3ea:	62 30       	cpi	r22, 0x02	; 2
 3ec:	09 f1       	breq	.+66     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3ee:	28 f4       	brcc	.+10     	; 0x3fa <setPWM1A+0x38>
 3f0:	66 23       	and	r22, r22
 3f2:	41 f0       	breq	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	61 30       	cpi	r22, 0x01	; 1
 3f6:	89 f0       	breq	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f8:	3c c0       	rjmp	.+120    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3fa:	63 30       	cpi	r22, 0x03	; 3
 3fc:	21 f1       	breq	.+72     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3fe:	64 30       	cpi	r22, 0x04	; 4
 400:	69 f1       	breq	.+90     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 402:	37 c0       	rjmp	.+110    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		case 0:
		TCCR1A |= (1 << WGM10);
 404:	e0 e8       	ldi	r30, 0x80	; 128
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	81 60       	ori	r24, 0x01	; 1
 40c:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
 40e:	e1 e8       	ldi	r30, 0x81	; 129
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	88 60       	ori	r24, 0x08	; 8
 416:	80 83       	st	Z, r24
		break;
 418:	36 c0       	rjmp	.+108    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		case 1:
		TCCR1A |= (1 << WGM11);
 41a:	e0 e8       	ldi	r30, 0x80	; 128
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
 424:	e1 e8       	ldi	r30, 0x81	; 129
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	80 83       	st	Z, r24
		break;
 42e:	2b c0       	rjmp	.+86     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		case 2:
		TCCR1A |= (1 << WGM10) | (1 << WGM11);
 430:	e0 e8       	ldi	r30, 0x80	; 128
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	83 60       	ori	r24, 0x03	; 3
 438:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
 43a:	e1 e8       	ldi	r30, 0x81	; 129
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	88 60       	ori	r24, 0x08	; 8
 442:	80 83       	st	Z, r24
		break;
 444:	20 c0       	rjmp	.+64     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		case 3:
		TCCR1A |= (1 << WGM10);
 446:	e0 e8       	ldi	r30, 0x80	; 128
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12) | (1 << WGM13);
 450:	e1 e8       	ldi	r30, 0x81	; 129
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	88 61       	ori	r24, 0x18	; 24
 458:	80 83       	st	Z, r24
		break;
 45a:	15 c0       	rjmp	.+42     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		case 4:
		TCCR1A |= (1 << WGM10) | (1 << WGM11);
 45c:	e0 e8       	ldi	r30, 0x80	; 128
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	83 60       	ori	r24, 0x03	; 3
 464:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12) | (1 << WGM13);
 466:	e1 e8       	ldi	r30, 0x81	; 129
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	88 61       	ori	r24, 0x18	; 24
 46e:	80 83       	st	Z, r24
		break;
 470:	0a c0       	rjmp	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		
		default:
		TCCR1A |= (1 << WGM10);
 472:	e0 e8       	ldi	r30, 0x80	; 128
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
 47c:	e1 e8       	ldi	r30, 0x81	; 129
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	88 60       	ori	r24, 0x08	; 8
 484:	80 83       	st	Z, r24
	}
	
	switch (Prescaler){
 486:	40 34       	cpi	r20, 0x40	; 64
 488:	51 05       	cpc	r21, r1
 48a:	e1 f0       	breq	.+56     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 48c:	38 f4       	brcc	.+14     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48e:	41 15       	cp	r20, r1
 490:	51 05       	cpc	r21, r1
 492:	61 f0       	breq	.+24     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 494:	48 30       	cpi	r20, 0x08	; 8
 496:	51 05       	cpc	r21, r1
 498:	79 f0       	breq	.+30     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 49a:	26 c0       	rjmp	.+76     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 49c:	41 15       	cp	r20, r1
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	58 07       	cpc	r21, r24
 4a2:	b1 f0       	breq	.+44     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4a4:	41 15       	cp	r20, r1
 4a6:	54 40       	sbci	r21, 0x04	; 4
 4a8:	c9 f0       	breq	.+50     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4aa:	1e c0       	rjmp	.+60     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
		case 0:
		TCCR1B |= (1 << CS10);
 4ac:	e1 e8       	ldi	r30, 0x81	; 129
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
		break;
 4b6:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 4b8:	e1 e8       	ldi	r30, 0x81	; 129
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	80 83       	st	Z, r24
		break;
 4c2:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS10) | (1 << CS11);
 4c4:	e1 e8       	ldi	r30, 0x81	; 129
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	83 60       	ori	r24, 0x03	; 3
 4cc:	80 83       	st	Z, r24
		break;
 4ce:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 4d0:	e1 e8       	ldi	r30, 0x81	; 129
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	84 60       	ori	r24, 0x04	; 4
 4d8:	80 83       	st	Z, r24
		break;
 4da:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS10) | (1 << CS12);
 4dc:	e1 e8       	ldi	r30, 0x81	; 129
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	85 60       	ori	r24, 0x05	; 5
 4e4:	80 83       	st	Z, r24
		break;
 4e6:	08 95       	ret
		
		default:
		TCCR1B |= (1 << CS10);
 4e8:	e1 e8       	ldi	r30, 0x81	; 129
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret

000004f4 <DutyA1>:
	
}


void DutyA1(uint8_t DutyCycle){
	OCR1A = DutyCycle;
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4fe:	08 95       	ret

00000500 <setPWM2A>:
#include "PWM2.h"
#include <avr/io.h>
#include <stdint.h>

void setPWM2A(uint8_t INV_NOR, uint8_t ModoOnda, uint16_t Prescaler){
	DDRB |= (1 << DDB3);
 500:	94 b1       	in	r25, 0x04	; 4
 502:	98 60       	ori	r25, 0x08	; 8
 504:	94 b9       	out	0x04, r25	; 4
	TCCR2A = 0;
 506:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 50a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	if (INV_NOR == 1){
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	21 f4       	brne	.+8      	; 0x51a <setPWM2A+0x1a>
		TCCR2A = (1 << COM2A1) | (1 << COM2A0);
 512:	80 ec       	ldi	r24, 0xC0	; 192
 514:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 518:	03 c0       	rjmp	.+6      	; 0x520 <setPWM2A+0x20>
	}
	else {
		TCCR2A = (1 << COM2A1);
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	}
	
	
	
	if (ModoOnda == 0){
 520:	61 11       	cpse	r22, r1
 522:	09 c0       	rjmp	.+18     	; 0x536 <setPWM2A+0x36>
		TCCR2A |= (1 << WGM20);
 524:	e0 eb       	ldi	r30, 0xB0	; 176
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
		TCCR2A &= ~(1 << WGM21);
 52e:	80 81       	ld	r24, Z
 530:	8d 7f       	andi	r24, 0xFD	; 253
 532:	80 83       	st	Z, r24
 534:	22 c0       	rjmp	.+68     	; 0x57a <setPWM2A+0x7a>
	}
	else if (ModoOnda == 1){
 536:	61 30       	cpi	r22, 0x01	; 1
 538:	31 f4       	brne	.+12     	; 0x546 <setPWM2A+0x46>
		TCCR2A |= (1 << WGM20) | (1 << WGM21);
 53a:	e0 eb       	ldi	r30, 0xB0	; 176
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	83 60       	ori	r24, 0x03	; 3
 542:	80 83       	st	Z, r24
 544:	1a c0       	rjmp	.+52     	; 0x57a <setPWM2A+0x7a>
	}
	else if (ModoOnda == 2){
 546:	62 30       	cpi	r22, 0x02	; 2
 548:	71 f4       	brne	.+28     	; 0x566 <setPWM2A+0x66>
		TCCR2A |= (1 << WGM20);
 54a:	e0 eb       	ldi	r30, 0xB0	; 176
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	81 60       	ori	r24, 0x01	; 1
 552:	80 83       	st	Z, r24
		TCCR2A &= ~(1 << WGM21);
 554:	80 81       	ld	r24, Z
 556:	8d 7f       	andi	r24, 0xFD	; 253
 558:	80 83       	st	Z, r24
		TCCR2B |= (1 << WGM22);
 55a:	e1 eb       	ldi	r30, 0xB1	; 177
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	88 60       	ori	r24, 0x08	; 8
 562:	80 83       	st	Z, r24
 564:	0a c0       	rjmp	.+20     	; 0x57a <setPWM2A+0x7a>
	}
	else{
		TCCR2A |= (1 << WGM20) | (1 << WGM21);
 566:	e0 eb       	ldi	r30, 0xB0	; 176
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	83 60       	ori	r24, 0x03	; 3
 56e:	80 83       	st	Z, r24
		TCCR2B |= (1 << WGM22);
 570:	e1 eb       	ldi	r30, 0xB1	; 177
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 60       	ori	r24, 0x08	; 8
 578:	80 83       	st	Z, r24
	}
	
	
	
	switch (Prescaler){
 57a:	40 34       	cpi	r20, 0x40	; 64
 57c:	51 05       	cpc	r21, r1
 57e:	41 f1       	breq	.+80     	; 0x5d0 <setPWM2A+0xd0>
 580:	48 f4       	brcc	.+18     	; 0x594 <setPWM2A+0x94>
 582:	48 30       	cpi	r20, 0x08	; 8
 584:	51 05       	cpc	r21, r1
 586:	c1 f0       	breq	.+48     	; 0x5b8 <setPWM2A+0xb8>
 588:	40 32       	cpi	r20, 0x20	; 32
 58a:	51 05       	cpc	r21, r1
 58c:	d9 f0       	breq	.+54     	; 0x5c4 <setPWM2A+0xc4>
 58e:	45 2b       	or	r20, r21
 590:	b9 f5       	brne	.+110    	; 0x600 <setPWM2A+0x100>
 592:	0c c0       	rjmp	.+24     	; 0x5ac <setPWM2A+0xac>
 594:	41 15       	cp	r20, r1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	58 07       	cpc	r21, r24
 59a:	31 f1       	breq	.+76     	; 0x5e8 <setPWM2A+0xe8>
 59c:	41 15       	cp	r20, r1
 59e:	84 e0       	ldi	r24, 0x04	; 4
 5a0:	58 07       	cpc	r21, r24
 5a2:	41 f1       	breq	.+80     	; 0x5f4 <setPWM2A+0xf4>
 5a4:	40 38       	cpi	r20, 0x80	; 128
 5a6:	51 05       	cpc	r21, r1
 5a8:	59 f5       	brne	.+86     	; 0x600 <setPWM2A+0x100>
 5aa:	18 c0       	rjmp	.+48     	; 0x5dc <setPWM2A+0xdc>
		case 0:
		TCCR2B |= (1 << CS20);
 5ac:	e1 eb       	ldi	r30, 0xB1	; 177
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 83       	st	Z, r24
		break;
 5b6:	08 95       	ret
		case 8:
		TCCR2B |= (1 << CS21);
 5b8:	e1 eb       	ldi	r30, 0xB1	; 177
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	80 83       	st	Z, r24
		break;
 5c2:	08 95       	ret
		case 32:
		TCCR2B |= (1 << CS20) | (1 << CS21);
 5c4:	e1 eb       	ldi	r30, 0xB1	; 177
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	83 60       	ori	r24, 0x03	; 3
 5cc:	80 83       	st	Z, r24
		break;
 5ce:	08 95       	ret
		case 64:
		TCCR2B |= (1 << CS22);
 5d0:	e1 eb       	ldi	r30, 0xB1	; 177
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	80 83       	st	Z, r24
		break;
 5da:	08 95       	ret
		case 128:
		TCCR2B |= (1 << CS20) | (1 << CS22);
 5dc:	e1 eb       	ldi	r30, 0xB1	; 177
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	85 60       	ori	r24, 0x05	; 5
 5e4:	80 83       	st	Z, r24
		break;
 5e6:	08 95       	ret
		case 256:
		TCCR2B |= (1 << CS21) | (1 << CS22);
 5e8:	e1 eb       	ldi	r30, 0xB1	; 177
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	86 60       	ori	r24, 0x06	; 6
 5f0:	80 83       	st	Z, r24
		break;
 5f2:	08 95       	ret
		case 1024:
		TCCR2B |= (1 << CS20) | (1 <<CS21) | (1 << CS22);
 5f4:	e1 eb       	ldi	r30, 0xB1	; 177
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	87 60       	ori	r24, 0x07	; 7
 5fc:	80 83       	st	Z, r24
		break;
 5fe:	08 95       	ret
		
		default:
		TCCR2B |= (1 << CS20);
 600:	e1 eb       	ldi	r30, 0xB1	; 177
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	81 60       	ori	r24, 0x01	; 1
 608:	80 83       	st	Z, r24
 60a:	08 95       	ret

0000060c <DutyA2>:
	}
	
}

void DutyA2(uint8_t DutyCycle){
	OCR2A = DutyCycle;
 60c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 610:	08 95       	ret

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
